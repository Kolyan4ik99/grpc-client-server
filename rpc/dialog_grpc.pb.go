// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: proto/dialog.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DialogClient is the client API for Dialog service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DialogClient interface {
	AuthAndListen(ctx context.Context, in *Info, opts ...grpc.CallOption) (Dialog_AuthAndListenClient, error)
}

type dialogClient struct {
	cc grpc.ClientConnInterface
}

func NewDialogClient(cc grpc.ClientConnInterface) DialogClient {
	return &dialogClient{cc}
}

func (c *dialogClient) AuthAndListen(ctx context.Context, in *Info, opts ...grpc.CallOption) (Dialog_AuthAndListenClient, error) {
	stream, err := c.cc.NewStream(ctx, &Dialog_ServiceDesc.Streams[0], "/dialog.Dialog/AuthAndListen", opts...)
	if err != nil {
		return nil, err
	}
	x := &dialogAuthAndListenClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Dialog_AuthAndListenClient interface {
	Recv() (*Value, error)
	grpc.ClientStream
}

type dialogAuthAndListenClient struct {
	grpc.ClientStream
}

func (x *dialogAuthAndListenClient) Recv() (*Value, error) {
	m := new(Value)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DialogServer is the server API for Dialog service.
// All implementations should embed UnimplementedDialogServer
// for forward compatibility
type DialogServer interface {
	AuthAndListen(*Info, Dialog_AuthAndListenServer) error
}

// UnimplementedDialogServer should be embedded to have forward compatible implementations.
type UnimplementedDialogServer struct {
}

func (UnimplementedDialogServer) AuthAndListen(*Info, Dialog_AuthAndListenServer) error {
	return status.Errorf(codes.Unimplemented, "method AuthAndListen not implemented")
}

// UnsafeDialogServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DialogServer will
// result in compilation errors.
type UnsafeDialogServer interface {
	mustEmbedUnimplementedDialogServer()
}

func RegisterDialogServer(s grpc.ServiceRegistrar, srv DialogServer) {
	s.RegisterService(&Dialog_ServiceDesc, srv)
}

func _Dialog_AuthAndListen_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Info)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DialogServer).AuthAndListen(m, &dialogAuthAndListenServer{stream})
}

type Dialog_AuthAndListenServer interface {
	Send(*Value) error
	grpc.ServerStream
}

type dialogAuthAndListenServer struct {
	grpc.ServerStream
}

func (x *dialogAuthAndListenServer) Send(m *Value) error {
	return x.ServerStream.SendMsg(m)
}

// Dialog_ServiceDesc is the grpc.ServiceDesc for Dialog service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Dialog_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dialog.Dialog",
	HandlerType: (*DialogServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AuthAndListen",
			Handler:       _Dialog_AuthAndListen_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/dialog.proto",
}

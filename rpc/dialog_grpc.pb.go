// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: proto/dialog.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DialogClient is the client API for Dialog service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DialogClient interface {
	Listen(ctx context.Context, in *Info, opts ...grpc.CallOption) (Dialog_ListenClient, error)
	StopListen(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Dialog_StopListenClient, error)
}

type dialogClient struct {
	cc grpc.ClientConnInterface
}

func NewDialogClient(cc grpc.ClientConnInterface) DialogClient {
	return &dialogClient{cc}
}

func (c *dialogClient) Listen(ctx context.Context, in *Info, opts ...grpc.CallOption) (Dialog_ListenClient, error) {
	stream, err := c.cc.NewStream(ctx, &Dialog_ServiceDesc.Streams[0], "/dialog.Dialog/Listen", opts...)
	if err != nil {
		return nil, err
	}
	x := &dialogListenClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Dialog_ListenClient interface {
	Recv() (*Value, error)
	grpc.ClientStream
}

type dialogListenClient struct {
	grpc.ClientStream
}

func (x *dialogListenClient) Recv() (*Value, error) {
	m := new(Value)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dialogClient) StopListen(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Dialog_StopListenClient, error) {
	stream, err := c.cc.NewStream(ctx, &Dialog_ServiceDesc.Streams[1], "/dialog.Dialog/StopListen", opts...)
	if err != nil {
		return nil, err
	}
	x := &dialogStopListenClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Dialog_StopListenClient interface {
	Recv() (*Empty, error)
	grpc.ClientStream
}

type dialogStopListenClient struct {
	grpc.ClientStream
}

func (x *dialogStopListenClient) Recv() (*Empty, error) {
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DialogServer is the server API for Dialog service.
// All implementations should embed UnimplementedDialogServer
// for forward compatibility
type DialogServer interface {
	Listen(*Info, Dialog_ListenServer) error
	StopListen(*Empty, Dialog_StopListenServer) error
}

// UnimplementedDialogServer should be embedded to have forward compatible implementations.
type UnimplementedDialogServer struct {
}

func (UnimplementedDialogServer) Listen(*Info, Dialog_ListenServer) error {
	return status.Errorf(codes.Unimplemented, "method Listen not implemented")
}
func (UnimplementedDialogServer) StopListen(*Empty, Dialog_StopListenServer) error {
	return status.Errorf(codes.Unimplemented, "method StopListen not implemented")
}

// UnsafeDialogServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DialogServer will
// result in compilation errors.
type UnsafeDialogServer interface {
	mustEmbedUnimplementedDialogServer()
}

func RegisterDialogServer(s grpc.ServiceRegistrar, srv DialogServer) {
	s.RegisterService(&Dialog_ServiceDesc, srv)
}

func _Dialog_Listen_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Info)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DialogServer).Listen(m, &dialogListenServer{stream})
}

type Dialog_ListenServer interface {
	Send(*Value) error
	grpc.ServerStream
}

type dialogListenServer struct {
	grpc.ServerStream
}

func (x *dialogListenServer) Send(m *Value) error {
	return x.ServerStream.SendMsg(m)
}

func _Dialog_StopListen_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DialogServer).StopListen(m, &dialogStopListenServer{stream})
}

type Dialog_StopListenServer interface {
	Send(*Empty) error
	grpc.ServerStream
}

type dialogStopListenServer struct {
	grpc.ServerStream
}

func (x *dialogStopListenServer) Send(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

// Dialog_ServiceDesc is the grpc.ServiceDesc for Dialog service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Dialog_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dialog.Dialog",
	HandlerType: (*DialogServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Listen",
			Handler:       _Dialog_Listen_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StopListen",
			Handler:       _Dialog_StopListen_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/dialog.proto",
}
